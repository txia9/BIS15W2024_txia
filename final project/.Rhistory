radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"), selected="trophic.guild"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 Homerange by Taxon"),
selectInput("x", "Select Taxon",
choices=c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon==input$x) %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
})
}
shinyApp(ui, server)
View(homerange)
library(shinydashboard)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library("tidyverse")
library("janitor")
library("naniar")
library("ggplot2")
library("shiny")
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library("tidyverse")
library("janitor")
library("naniar")
library("ggplot2")
library("shiny")
library(shinydashboard)
happy <- read.csv("data/archive/2021.csv") %>% clean_names()
happy %>%
ggplot(aes(x=regional_indicator, y=ladder_score, fill="linen"))+
geom_boxplot(alpha=0.4)+
theme(axis.text.x = element_text(angle = 30, hjust = 1))
happy %>%
ggplot(aes(x=regional_indicator, y=logged_gdp_per_capita, fill="linen"))+
geom_boxplot(alpha=0.4)+
theme(axis.text.x = element_text(angle = 30, hjust = 1))
runApp("plot_iris.R")
View(happy)
names(happy)
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("counry_name", "regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score")
selectInput("y", "Select Y Variable", choices = c("ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score")
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("counry_name", "regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score")
selectInput("y", "Select Y Variable", choices = c("ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score")
server <- function(input, output, session) {
??
server <- function(input, output) {
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("counry_name", "regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score")
selectInput("y", "Select Y Variable", choices = c("counry_name", "regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score")
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("country_name", "regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score")
selectInput("y", "Select Y Variable", choices = c("country_name", "regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score")
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("country_name", "regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
selectInput("y", "Select Y Variable", choices = c("country_name", "regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="regional_indicator"))+
geom_point()+
theme_light(base_size=18)
}
shinyApp(ui, server)
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="regional_indicator"))+
geom_point()+
theme_light(base_size=18)
})
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="regional_indicator"))+
geom_point()+
theme_light(base_size=18)
})
}
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("country_name", "regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
selectInput("y", "Select Y Variable", choices = c("country_name", "regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="regional_indicator"))+
geom_point()+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="regional_indicator"))+
geom_point()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
theme_light(base_size=18)
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("country_name", "regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
selectInput("y", "Select Y Variable", choices = c("country_name", "regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="regional_indicator"))+
geom_point()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
happy %>%
ggplot(aes(x=country_name, y=ladder_score))+
geom_point()
happy %>%
ggplot(aes(x=country_name, y=ladder_score))+
geom_point()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))
happy %>%
ggplot(aes(x=country_name, y=ladder_score))+
geom_col()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))
happy %>%
ggplot(aes(x=country_name, y=ladder_score))+
geom_col()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
coord_flip()
happy %>%
ggplot(aes(x=country_name, y=ladder_score))+
geom_col()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
coord_flip()+
theme_light(base_size=10)
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
selectInput("y", "Select Y Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="regional_indicator"))+
geom_point()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
selectInput("y", "Select Y Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="regional_indicator"))+
geom_point()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
selectInput("y", "Select Y Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="country_name"))+
geom_point()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
selectInput("y", "Select Y Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="country_name"))+
geom_point()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
geom_smooth(method=lm, se=T, na.rm = F)+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
selectInput("y", "Select Y Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="country_name"))+
geom_point()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
geom_smooth(method=lm, se=T, na.rm = T)+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="country_name"))+
geom_point()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
geom_smooth(method=lm, se=F, na.rm = T)+
theme_light(base_size=18)
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
selectInput("y", "Select Y Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="country_name"))+
geom_point()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
geom_smooth(method=lm, se=F, na.rm = T)+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("shiny")
library(shiny)
library("tidyverse")
library("palmerpenguins")
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"),
selected="trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"),
selected="regional_indicator"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x="country_name", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library("tidyverse")
library("janitor")
library("naniar")
library("ggplot2")
library("shiny")
library(shinydashboard)
happy <- read.csv("data/archive/2021.csv") %>% clean_names()
happy %>%
ggplot(aes(x=regional_indicator, y=ladder_score, fill="linen"))+
geom_boxplot(alpha=0.4)+
theme(axis.text.x = element_text(angle = 30, hjust = 1))
happy %>%
ggplot(aes(x=regional_indicator, y=logged_gdp_per_capita, fill="linen"))+
geom_boxplot(alpha=0.4)+
theme(axis.text.x = element_text(angle = 30, hjust = 1))
runApp("plot_iris.R")
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"),
selected="regional_indicator"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x="country_name", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
ggplot(data=happy, aes_string(x="country_name", fill=input$x))+
geom_bar(alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Country")
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"),
selected="regional_indicator"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x="country_name", fill=input$x))+
geom_bar(alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Country")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"),
selected="regional_indicator"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x="country_name", fill=input$x))+
geom_bar(alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Country")
})
}
shinyApp(ui, server)
View(happy)
happy %>%
ggplot(aes(x=country_name, y=ladder_score))+
geom_col()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))
happy %>%
ggplot(aes(x=country_name, y=ladder_score))+
geom_col()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
happy %>%
ggplot(aes(x=regional_indicator, y=ladder_score))+
geom_col()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
happy %>%
ggplot(aes(x=regional_indicator, y=ladder_score))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"),
selected="regional_indicator"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x="country_name", fill=input$x))+
geom_bar(alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Country")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
selectInput("y", "Select Y Variable", choices = c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"), selected = "ladder_score"),
plotOutput("plot")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=happy, aes_string(x=input$x, y=input$y, color="country_name"))+
geom_point()+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
geom_smooth(method=lm, se=F, na.rm = T)+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
library("dplyr")
library("tidyverse")
library("janitor")
library("naniar")
library("ggplot2")
library("shiny")
library("shinydashboard")
happy <- read.csv("data/archive/2021.csv") %>% clean_names()
View(happy)
happy %>%
group_by(regional_indicator)
happy %>%
group_by(regional_indicator) %>%
count(regional_indicator)
```{r}
new_happy <- happy %>%
filter(regional_indicator == "Central and Eastern Europe" | regional_indicator=="Western Europe" | regional_indicator=="North America and ANZ")
View(new_happy)
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"),
selected="regional_indicator"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=new_happy, aes_string(x="country_name", fill=input$x))+
geom_bar(alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Country")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"),
selected="regional_indicator"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=new_happy, aes_string(x="country_name", fill=input$x))+
geom_bar(alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Country")
})
}
shinyApp(ui, server)
ggplot(data=new_happy, aes_string(x="country_name", y=input$x, fill=input$x))+
geom_col(alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Country")
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"),
selected="regional_indicator"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=new_happy, aes_string(x="country_name", y=input$x, fill=input$x))+
geom_col(alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Country")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("regional_indicator", "ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"),
selected="regional_indicator"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=new_happy, aes_string(x="country_name", y=input$x, fill="regional_indicator"))+
geom_col(alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Country")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"),
selected="ladder_score"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=new_happy, aes_string(x="country_name", y=input$x, fill="regional_indicator"))+
geom_col(alpha=0.8, color="black")+
labs(x=NULL, y=NULL, fill="Country")
})
}
shinyApp(ui, server)
ggplot(data=new_happy, aes_string(x="country_name", y=input$x, fill="regional_indicator"))+
geom_col(alpha=0.8, color="black")+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
labs(x=NULL, y=NULL, fill="Country")
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("ladder_score", "logged_gdp_per_capita", "social_support", "healthy_life_expectancy", "freedom_to_make_life_choices"),
selected="ladder_score"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(data=new_happy, aes_string(x="country_name", y=input$x, fill="regional_indicator"))+
geom_col(alpha=0.8, color="black")+
theme(axis.text.x = element_text(angle = 30, hjust = 1))+
labs(x=NULL, y=NULL, fill="Country")
})
}
shinyApp(ui, server)
